Once you have completed your implementation, review and respond to the questions below. Each of your responses should be at least four sentences.

----- Question 1 -----

What kinds of faults can your peer-to-peer chat implementation tolerate? Faults may include problems with machines or the network, as well as program crashes. Be specific about what failure situations you could tolerate, and explain how the system can continue to work in the face of these failures.

---- Response ----
The p2p chat can handle any other peer crashing or disconnecting without
crashing a one's own program. Since each peer runs in its own isolated
program, another peer disconnecting won't take down anyone elses program;
it will only break the message sending connection between peers. The
implementation can recover from a failing write to another peer (it only
prints to stderr) without disconnecting from peers or exiting the
program. Our implementation will keep listening and writing if one write
command fails. Our reasoning was that if one write fails, there is no
reason for either the peer who is writing or the recieving peers to fail,
so we allow the network to continue running.  


---- Question 2 ----

What faults will cause your peer-to-peer chat to fail, or to operate in some diminished capacity? Again, be specific about the situations that will result in failure.

---- Response ----
If a read fails, the peer who tried to read the message will assume that
the peer it was listening for must have disconnected, so the network will
partition at that point in the network. Since read can fail for a variety
of reasons, peers decide it's safest to assume that the peer we were trying
to read from has disconnected rather than try to read from a peer that has
disconnected. Disconnection in the middle of the peer network will lead to
a diminished capacity of the chat network. If one peer who connects two
groups of peers leaves, then the peers in each group will no longer be able
to communicate with peers in the other group because the network partitioned.


---- Question 3 ----

One mechanism for tolerating failure is replication. If each client connected to two existing peers instead of just one, would that help you tolerate any additional faults? What problems could this change create for your implementation?

---- Response ----
If one peer could connect to 2 others instead of just one, it would make
the network more robust to disconnections. If one peer disconnects, the
double connection could allow for the network to avoid partitioning (if
properly structured). However, double connection would introduce the
possibility of cycles in the network; making the implementation much more
complicated. If a cycle appears in the network, we wouldn't simply be able
to forward every message received to all our peer connections since you
might end up sending a message back to its original sender (causing
infinite message sending through the cycle). More data would have to be
sent with the message to ensure messages weren't received multiple times. 


---- Question 4 ----

Describe one additional change you could make to the peer-to-peer chat system that would allow it to tolerate faults. Describe how you would implement this change, and at least one example of how it would allow you to tolerate a fault.

---- Response ----

Adding a segfault handler to the code would allow the network to deal with
failing reads a little more robustly. Since read can fail for a variety of
reasons, we don't know if the command failed because the peer we were
trying to read from actually disconnected or if it was some other issue
that could be recovered from. By adding a segfault handler, we could make
it so that a failing read would not stop us from listening for the other
peer, it would only stop listening on a segfault caused by listening on a
socket that was no longer connected. This would make the network just a
little bit more robust to network communication errors.
